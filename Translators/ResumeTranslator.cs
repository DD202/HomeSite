using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using DomDeMaioHomePage.Models;

namespace DomDeMaioHomePage.Translators
{
    public static class ResumeTranslator
    {
        public static Resume TranslateJsonToResume(DomDeMaioHomePage.Models.AutoGenerated.JsonResume input)
        {
            Resume output = new Resume();
            output.Person.FirstName = input.FirstName;
            output.Person.LastName = input.LastName;
            output.Person.Address.Address1 = input.Address.StreetAddress;
            output.Person.Address.City = input.Address.City;
            output.Person.Address.State = input.Address.StreetAddress;
            output.Person.Address.Zip = input.Address.PostalCode;
            output.Person.EMailAddress = input.Email;

            foreach(var inputPhone in input.PhoneNumber)
            {
                PhoneNumber outputPhone = new PhoneNumber();
                outputPhone.Type = inputPhone.Type;
                outputPhone.Number = inputPhone.Number;
                output.Person.PhoneNumbers.Add(outputPhone);
            }

            foreach(var inputJob in input.ProfessionalExperience.Jobs)
            {
                Job outputJob = new Job();
                outputJob.Title = inputJob.JobTitle;
                outputJob.Address.City = inputJob.Address.City;
                outputJob.Address.State = inputJob.Address.State;
                outputJob.Company = inputJob.Company;
                outputJob.StartDate = StringToDate(inputJob.StartDate);
                outputJob.EndDate = StringToDate(inputJob.EndDate);
                outputJob.Description = inputJob.Description;
                
                if(inputJob.RotationalJob != null && inputJob.RotationalJob.Length > 0)
                {
                    foreach (var inputRotationalJob in inputJob.RotationalJob)
                    {
                        DomDeMaioHomePage.Models.RotationalJob outputRotationalJob = new RotationalJob();
                        outputRotationalJob.JobTitle = inputRotationalJob.JobTitle;
                        outputRotationalJob.Division = inputRotationalJob.Division;
                        foreach (var inputContrb in inputRotationalJob.KeyContributions)
                        {
                            Contribution outputContribution = new Contribution();
                            outputContribution.Type = inputContrb.Type;
                            outputContribution.Description = inputContrb.Description;

                            outputRotationalJob.Contributions.Add(outputContribution);
                        }
                        outputJob.RotationalJobs.Add(outputRotationalJob);
                    }
                }

                if (inputJob.KeyContributions != null && inputJob.KeyContributions.Length > 0)
                {
                    foreach (var inputContrb in inputJob.KeyContributions)
                    {
                        Contribution outputContribution = new Contribution();
                        outputContribution.Type = inputContrb.Type;
                        outputContribution.Description = inputContrb.Description;
                        outputContribution.Benefit = inputContrb.Benefit;

                        outputJob.Contributions.Add(outputContribution);
                    }
                }
                output.ProfessionalExperience.Jobs.Add(outputJob);
            }

            foreach(var inputSkill in input.ProfessionalExperience.Proficiencies)
            {
                Skill outputSkill = new Skill();
                outputSkill.Type = inputSkill.Type;
                outputSkill.Description = inputSkill.Description;
                output.ProfessionalExperience.Skills.Add(outputSkill);
            }

            foreach (var inputTraining in input.ProfessionalExperience.Training)
            {
                Training outputTraining = new Training();
                outputTraining.Name = inputTraining.Name;
                outputTraining.Description = inputTraining.Description;
                output.ProfessionalExperience.Trainings.Add(outputTraining);
            }

            foreach(var inputAward in input.ProfessionalExperience.Awards)
            {
                Award outputAward = new Award();
                outputAward.Description = inputAward.Description;
                output.ProfessionalExperience.Awards.Add(outputAward);
            }

            output.Education.Colleges.Add(
                new College
                {
                    Name = input.Education.College.Name,
                    GraduationDate = StringToDate(input.Education.College.GraduationDate),
                    Degree = input.Education.College.Degree,
                    Major = input.Education.College.Major,
                    Minor = input.Education.College.Minor,
                    MajorGpa = DoubleToDecimal(input.Education.College.Gpa.Major),
                    CumulativeGpa = DoubleToDecimal(input.Education.College.Gpa.Cumulative)

                }
            );
            return output;
        }

        private static DateTime? StringToDate(string date)
        {
            try
            {
                DateTime output = Convert.ToDateTime(date);
                return output;
            }
            catch
            {
                return null;
            }
        }

        private static decimal? DoubleToDecimal(double input)
        {
            try
            {
                decimal output =  Convert.ToDecimal(input);
                return output;
            }
            catch
            {
                return null;
            }

        }
    }
}